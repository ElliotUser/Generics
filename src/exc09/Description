                                    Обобщенные интерфейсы.
    Обобщенные интерфейсы объявляются таким же образом, как и обобщенные классы.

Пример.
    В примере создается обобщенный интерфейс MinMax, где объявляются методы min() и max(), которые, как пред-
полагается, должны возвращать минимальное и максимальное значения из некоторого множества объектов.
    Обратите внимание на следующее объявление обобщенного интерфейса MinMax:

interface MinMax<T extends Comparable<T>>{
}

    Как правило, обобщенный интерфейс объявляется таким же образом, как и обобщенный класс. В данном случае
параметр типа Т ограничивается сверху интерфейсом Comparable. Как пояснялось выше, интерфейс Comparable опре-
делен в пакете java.lang для целей сравнения объектов. Параметр его типа обозначает тип сравниваемых объектов.
    Затем интерфейс MinMax реализуется в классе MyClass.

public class MyClass<T extends Comparable<T>> implements MinMax<T> {
}

    Обратите особое внимание, каким образом параметр типа Т сначала объявляет­ ся в классе MyClass, а затем
передается интерфейсу MinMax. Интерфейсу MinMax требуется тип класса, реализующего интерфейс Comparable, поэ-
тому в объявлении класса, реализующего этот интерфейс (в данном случае - класса MyClass), должно быть наложено
такое же ограничение. Более того, однажды наложенное ограничение уже не нужно повторять в операторе implements.
В действительности это было бы даже неверно. Например. приведенная ниже строка неверна и не может быть скомпи-
лирована. Однажды установленный параметр типа просто передается интерфейсу без последующих видоизменений.

//Неверно!
class MyClass<T extends Comparable<T>> implements MinMax<T extends Comparable<T>>{
}

    Как правило, класс, реализующий обобщенный интерфейс, должен быть так­ же обобщенным - по крайней мере, в
тех случаях, когда он принимает параметр типа, передаваемый далее интерфейсу. Например, следующая попытка объявить
класс MyClass приведет к ошибке:

class MyClass implements MinМax<T> { // Неверно!

    В классе MyClass параметр типа не объявляется, поэтому передать его интер­фейсу MinMax никак нельзя. В данном
случае идентификатор параметра типа Т просто неизвестен, и поэтому компилятор выдаст ошибку. Безусловно, если
класс реализует конкретный тип обобщенного интерфейса, то реализующий класс не обязан быть обобщенным, как пока-
зано ниже.

class MyClass implements MinМax<Integer> { // Верно

ВАЖНО!
    Обобщенный интерфейс дает два преимущества. Во-первых, он может быть реализован для разных типов данных.
И во-вторых, он позволяет наложить огра­ничения на типы данных, для которых он может быть реализован. В примере
интерфейса MinMax вместо параметра типа Т могут быть подставлены только типы классов, реализующих интерфейс
Comparable.
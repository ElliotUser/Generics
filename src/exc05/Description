                                    Применение метасимвольных аргументов.
    Типовая безопасность удобна не только сама по себе, но иногда она позволяет получить идеально подходящие
конструкции. Например, в классе Stats, рассмо­тренном в предыдущем разделе, предполагается, что в него требуется
ввести метод sameAvg(), который определяет, содержат ли два объекта типа Stats массивы, дающие одинаковое сре-
днее значение независимо от типа числовых значений в них. Так, если один такой объект содержит значения 1.О,
2.О и З.О типа double, а другой-целочисленные значения 2, 1 и З, то их среднее значение будет одина­ковым. Для
того чтобы реализовать метод sameAvg(), можно, в частности, передать ему аргумент типа Stats, а затем сравнить
средние значения в этом методе и вызывающем объекте, возвращая логическое значение true, если они равны. Кроме
того, необходимо иметь возможность вызывать метод sameAvg(), например, следующим образом:

Integer inurns[] = { 1, 2, 3, 4, 5 };
DouЫe dnums[] = { 1.1, 2.2, 3.3, 4.4, 5.5 );

Stats<Integer> iob = new Stats<Integer>(inums);
Stats<DouЫe> dob = new Stats<DouЫe> (dnums);

if(iob.sameAvg(dob) )
    System.out.println("Средние значения одинаковы.");
else
    System.out.println("Средние значения отличаются.");

    На первый взгляд, написать метод sameAvg() совсем не трудно. Ведь класс Stats является обобщенным, и поэтому
его метод average() может оперировать разнотипными объектами класса Stats. К сожалению, трудности появляются,
стоит только попытаться объявить параметр типа Stats. Если Stats - параметризованный тип, то какой тип параметра
следует указать для Stats при объявлении параметра этого типа? Вполне подходящим может показаться решение исполь-
зовать Т в качестве параметра типа следующим образом:

// Это решение не годится!
// Определить равенство двух средних значений
boolean sameAvg (Stats<T> ob) {
    if(average() == ob.average())
        return true;
    return false;
}

    Недостаток такого решения заключается в том, что ого годится только для объекта класса Stats, тип которого
совпадает с вызывающим объектом. Так если вызывающий объект относится к типу Stats<Integer>, то и параметр ob
должен относиться к типу Stats<Integer>. Его нельзя применять,например, для сравнения среднего значения типа
Stats<Double> со средним значением типа Stats<Short>. Такое решение пригодится только в очень ограниченном
контексте и не является общим, а следовательно, и обобщенным.
    Чтобы создать обобщенную версию метода sameAvg(), следует воспользоваться средством обобщения Java -
метасимвольным аргументом. Метасимвольный аргумент обозначаеся знаком ? и представляет неизвестный тип. Применяя
метасимвольный аргумент, метод sameAvg() можно написать, например, следующим образом:

// Определить равенство двух средних значений.
//Обратите внимание на применение метасимвола
boolean sameAvg (Stats<?> оb) {
    if(average() == ob.average() )
        return true;
    return false;
}

    где метасимвольный аргумент типа Stats<?> совпадает с любым объектом класса Stats, что позволяет сравнить
среднее значение любых двух объектов класса Stats.

Пример.
    Демонстрируется применение метосимвольного аргумента.


    И еще одно, последнее замечание: следует иметь в виду, что метасимвол не оказывает никакого влияния на тип
создаваемых объектов класса Stats. Это определяется оператором extends в объявлении класса Stats. А метасимвол
просто совпадает в любым достовериным объектом класса Stats.



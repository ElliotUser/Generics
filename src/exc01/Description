                                Обобщения(Generics)
    Обобщения - это параметризованные типы. Такик типы важны, поскольку они позволяют объявлять классы,
интерфейсы и методы, где тип данных, которыми они оперируют, указан в виде параметра. Используя обоб-
щения, можно, например, создать единственный класс, который будет автоматически обращаться с разнотип-
ными данными. Классы, интерфейсы или методы, оперирую­щие параметризованными типами, называются обобшен-
ными.
    Обобщения внесли в язык типовую безопасность типов, которой так недоставало прежде. Они также упро-
стили процесс выполнения, поскольку теперь нет нужды в явном приведении типов для преобразования объектов
типа Object в конкретные типы обрабатываемых данных. Благодаря обобщениям все операции приведения типов
выполняются автоматически и неявно. Таким образом, обобщения расширили возможности повторного использо-
вания кода, позволив делать это легко и безопасно.

ПРИМЕР.
    В приведенной программе определяются два класса. Первый из них - обобщенный класс Gen, второй - демон-
страционный класс GenDemo, в котором используется обобщенный класс Gen.
    Обратите внимание на класс Gen :

class Gen<T>{
}

    где Т обозначает имя параметра типа. Это имя используется в качестве заполнителя вместо которого в даль-
нейшем подставляется имя конкретного типа, передаваемого классу Gen при создании объекта. Это означает, что
обозначение Т применяется в классе Gen всякий раз, когда требуется параметр типа. Обратите внимание на то,
что обозначение Т заключено в угловые скобки (<>). Этот синтаксис может быть обобщен. Всякий раз когда объ-
является параметр типа, он указывается в угловыа скобках. В классе Gen применяется параметр типа, и поэтому
он является обобщенным классом, относящимся к так называемому параметризованному типу.
    Далее тип Т используется для объявления объекта ob:

T ob;

    Параметр типа Т - это место для подстановки конкретного типа, который указывается в дальнейшем при созда-
нии объекта класса Gen. Это означает, что объект ob станет объектом того типа, который будет передан в качес-
тве параметра типа Т.
    Рассмотрим далее конструктор Gen().

Gen(T o){
    ob = o;
}

    Параметр о имеет тип Т. Это значит что конкретный тип параметра о определяется с помощью параметра типа Т,
передаваемого при создании класса Gen. А поскольку параметр о и переменная экземпляра ob относятся к типу Т,
то они получают одинаковый конкретный тип при создании объекта класса Gen.
    Параметр Т так же может быть использован для указания типа, возвращаемого метода, как показано ниже на при-
мере метода getob(). Объект ob также относится к типу Т, поэтому его тип совместим с типом, возвращаемым мето-
дом getob().

T getob(){
    return ob;
}

    Класс GenDemo служит для демонстрации обобщенного класса Gen. Сначала в нем в нем создается версия класса Gen
для целых чисел:

Gen<Integer> iob;

    Тип Integer указан в угловых скобках после слова Gen. В данно случае Integer - это аргумент типа, который пе-
редается в качестве параметра типа Т из класса Gen. Это объявление фактически означает создание версии класса Gen
где ссылки типа Т преобразуются в ссылки типа Integer. Таким образом, в данном объявлении объект ob относится к
типу Integer, и метод getob() возвращает тип Integer.
    Компилятор Java на самом деле не создает разные версии класса Gen или любого другого обобщенно­ го класса. Тео-
ретически это было бы удобно, но на практике дело обстоит иначе. Вместо этого компилятор удаляет все сведения об
обобщенных типах, выполняя необходимые операции приведения типов, чтобы сделать поведение прикладного кода таким,
как будто создана конкретная версия класса Gen . Таким образом, име­ется только одна версия класса Gen , которая
существует в прикладной программе.





                               Обобщения действуют только со ссылочными типами.
    Когда объявляется экземпляр обобщенного типа, аргумент, передаваемый в ка­честве параметра типа, должен отно-
ситься к ссылочному типу, но ни в коем случае не к примитивному типу наподобие int или char. Например, в качестве
параметра Т классу Gen можно передать тип любого класса, но нельзя передать примитив­ный тип. Таким образом, сле-
дующее объявление недопустимо:

Gen<int> intOb = new Gen<int>(53) ; // ОШИБКА! Использовать
                                    // примитивные типы нельзя !



                                Обобщеные типы различаются по аргументам типа.
    В отношении обобщенных типов самое главное понять, что ссылка на одну конкретную версию обобщенного типа несов-
местима с другой версией того же самого обобщенного типа. Так, если ввести следующую строку кода в предыдущую прог-
рамму, то при ее компиляции возникнет ошибка:

iOb = strOb; // НЕВЕРНО!

    Несмотря на то что переменные экземпляра iOb и strOb относятся к типу Gen<T>, они являются ссылками на разные
типы объектов, потому что их параметры типов отличаются. Этим, в частности, обобщения обеспечивают типовую безопас-
ность, предотвращая ошибки подобного рода.


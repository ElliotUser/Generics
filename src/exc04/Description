                                    Ограниченные типы.
    Иногда удобно ограничеть перечень типов, передаваемых в качестве параметров. Допустим требуется создать
обобщенный класс с методом, возвращающим среднее значение массива чисел. Более того, с помощью этого класса
требуется получить среднее значение их целых чисел, а также чисел с плавающей точкой одинарно и двойной
точности. Таким образом, тип числовых данных требуется указать обобщенно, используя параметр типа.

Пример.
    Попытаемся создать такой класс.
    Метод average() из класса Stats пытается получить версию типа double для каждого числа из массива nums,
вызывая метод doubleValue(). Все классы оболочек числовых типов данных, в том числе Integer и Double, явля-
ются под­классами, производными от класса Number, а в классе Number определяется метод doubleValue() , поэ-
тому данный метод доступен во всех классах оболочек числовых типов данных. Но дело в том, что компилятор не
может знать, что автор программы намерен создавать объекты типа Stats, используя только числовые типы данных.
Поэтому, когда класс Stats компилируется, выдается сообщение об ошибке, уведомляющее, что метод douЬleValue()
неизвестен. Чтобы устра­нить эту ошибку, придется найти какой-нибудь способ сообщить компилятору, что в ка-
честве параметра Т предполагается передавать числовые типы. Кроме того, требуется каким-то образом гаранти-
ровать, что передаваться будут талько числовые типы данных.
    Для подобных случаев в Java предоставляются ограниченные типы. Указывая па­раметр типа, можно наложить
ограничение сверху в виде верхней границы, где объявляется суперкласс, от которого должны быть унаследованы
все аргументы типов. С этой целью вместе с параметром указывается ключевое слово extends, как показано ниже.

<T extends суперкласс>

    Это означает что параметр типа Т может быть заменен только указанным суперклассом или его подклассом. Сле-
довательно, суперкласс объявляет верхнюю границу включительно.

Пример exc04a.
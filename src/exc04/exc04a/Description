Пример exc04a.
    Наложив ограничения сверху, можно исправить класс Stats, указав класс Number в виде верхней границы для пара-
метра типа.
    Обратите внимание на то, что класс Stats объявляется теперь следующим образом:

class Stats<T extends Number>{
}

    Тип Т ограничивается сверху классом Number, а следовательно, компилято­ру Java теперь известно, что все объекты
типа Т могут вызывать метод doubleValue(), поскольку это метод класса Number. И само по себе это уже серьезное преи-
мущество. Но кроме того, ограничение параметра типа Т предотвращает создание нечисловых объектов типа Stats. Так,
если попытаться убрать комментарии из строк кода в конце данной программы и перекомпилировать ее, то во время компи-
ляции будет выдана ошибка, поскольку класс String не является производным от класса Number.

    В виде ограничения можно накладывать не только тип класса, но и тип интер­фейса. Более того, такое ограничение
может включать в себя как тип класса, так и типы одного или нескольких интерфейсов. В этом случае тип класса должен
быть задан первым. Когда ограничение включает в себя тип интерфейса, допустимы только аргументы типа, реализующие
этот интерфейс. Накладывая на обоб­щенный тип ограничение, состоящее из класса и одного или нескольких интерфейсов,
для их объединения следует воспользоваться логической операцией &:

class Gen<T extends MyClass & MyInterface>{
}

    где параметр типа Т ограничивается классом MyClass и интерфейсом MyInterface. Таким образом, любой тип, передава-
емый параметру Т, должен быть подклассом, производным от класса MyClass и реализующим интерфейс MyInterface.
